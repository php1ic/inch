os: linux
dist: bionic
language: cpp

jobs:
  include:

    # GCC Builds
    # GCC <8 does have the std::filesystem
    - os: linux
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - ['lcov','g++-8']
            - ninja-build
      env: COMPILER='g++-8' COVERAGE=1

    - os: linux
      compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - ['clang-8']
            - ninja-build
            - libstdc++-8-dev
      env: COMPILER='clang++-8'


before_script:
  - export CXX=${COMPILER}
  - cd ${TRAVIS_BUILD_DIR}
  - cmake -GNinja -H. -B../Debug-build -DINCH_UNIT_TESTS=ON -DCOVERAGE_COMMAND=/usr/bin/gcov-8 -DINCH_CODE_COVERAGE=${COVERAGE} -DCMAKE_BUILD_TYPE=Debug
  - cmake -GNinja -H. -B../Release-build -DINCH_UNIT_TESTS=ON -DINCH_CODE_COVERAGE=OFF -DCMAKE_BUILD_TYPE=Release


script:
  - cmake --build ../Release-build
  - cd ../Release-build
  - ctest -j2 -V
  - cmake --build ../Debug-build
  - cd ../Debug-build
  - ctest -j2 -V

after_success:
  # Create lcov report and upload to codecov.io
  - |
    if [[ "${COVERAGE}" == "999" ]]; then
    # capture coverage info
    lcov --directory . --capture --gcov-tool /usr/bin/gcov-8 --output-file coverage.info
    # filter out system and test files.
    lcov --remove coverage.info '/usr/*' '*/tests/*' '*/external/*' --output-file coverage.info
    # output coverage data for debugging (optional)
    lcov --list coverage.info
    # Uploading to CodeCov
    # '-f' specifies file(s) to use and disables manual coverage gathering and file search which has already been done above
    bash <(curl -s https://codecov.io/bash) -x /usr/bin/gcov-8 -f coverage.info || echo "Codecov did not collect coverage reports"
    fi
