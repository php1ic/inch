stages:
  - gcc-build
  - clang-build

# Full ubuntu image seems a bit heavy handed
# I need to look into/understand docker images,
# there is no official clang/llvm one on the docker pages,
# and although thre is an official gcc image, gcc:8 only
# gives version 6.
image: ubuntu:latest

#Install the required packages to run the jobs of all stages
before_script:
  - apt update && apt -y install cmake ninja-build

# GCC
gcc-build-Debug:
  stage: gcc-build

  script:
    - apt -y install g++
    - cmake -H. -B../build -GNinja -DCMAKE_CXX_COMPILER=/usr/bin/g++ -DCMAKE_BUILD_TYPE=Debug
    - cmake --build ../build
    - cd ../build
    - ctest -V

gcc-build-Release:
  stage: gcc-build

  script:
    - apt -y install g++
    - cmake -H. -B../build -GNinja -DCMAKE_CXX_COMPILER=/usr/bin/g++ -DCMAKE_BUILD_TYPE=Release
    - cmake --build ../build
    - cd ../build
    - ctest -V

# clang/LLVM
clang-build-Debug:
  stage: clang-build

  script:
    - apt -y install clang
    - cmake -H. -B../build -GNinja -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DCMAKE_BUILD_TYPE=Debug
    - cmake --build ../build
    - cd ../build
    - ctest -V

clang-build-Release:
  stage: clang-build

  script:
    - apt -y install clang
    - cmake -H. -B../build -GNinja -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DCMAKE_BUILD_TYPE=Release
    - cmake --build ../build
    - cd ../build
    - ctest -V
